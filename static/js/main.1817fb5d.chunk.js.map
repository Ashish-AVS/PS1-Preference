{"version":3,"sources":["MyData.js","App.js","index.js"],"names":["MyData","rawData","useState","isModalVisible","setIsModalVisible","modalContent","setModalContent","columns","title","dataIndex","key","render","text","onClick","data","map","el","name","projects","console","log","showModal","branches","tag","color","toUpperCase","visible","onOk","onCancel","proj","projKeys","Object","keys","style","textAlign","ele","dataSource","App","Search","Input","Header","Layout","Footer","Sider","Content","Menu","SubMenu","setData","query","setQuery","useEffect","axios","get","then","res","results","Fuse","search","dataResults","result","item","colors","className","width","backgroundColor","index","marginBottom","type","icon","DownloadOutlined","size","placeholder","enterButton","prefix","SearchOutlined","onChange","currentTarget","value","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1817fb5d.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport './App.css';\r\nimport {Table, Tag, Modal} from 'antd';\r\n\r\nexport default function MyData(rawData) {\r\nconst [isModalVisible, setIsModalVisible] = useState(false);\r\nconst [modalContent, setModalContent] = useState([\"Notjing\"]);\r\n\r\n  const showModal = (text) => {\r\n    setIsModalVisible(true);\r\n    rawData.data.map(el => {\r\n        if(el.name===text){\r\n            setModalContent(el.projects);\r\n            // console.log(el.projects)\r\n        }\r\n    })\r\n    // setModalContent(text);\r\n    console.log(rawData)\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n  const displayModalContent = () => {\r\n      modalContent.map(el => modalContent)\r\n  }\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: text => <span onClick={() => showModal(text)}>{text}</span>,\r\n        },\r\n        {\r\n            title: 'Industry',\r\n            dataIndex: 'industry',\r\n            key: 'industry',\r\n        },\r\n        {\r\n            title: 'location',\r\n            dataIndex: 'location',\r\n            key: 'location',\r\n        },\r\n        \r\n        {\r\n            title: 'Branches',\r\n            dataIndex: 'branches',\r\n            key: 'branches',\r\n            render: branches => (\r\n                <>\r\n                  {branches.map(tag => {\r\n                      let color=\"pink\"\r\n                     if(tag===\"A7\") color = \"geekblue\"\r\n                     if(tag===\"A3\") color = \"gold\"\r\n                     if(tag===\"A8\") color = \"lime\"\r\n                     if(tag===\"AA\") color = \"green\"\r\n                     if(tag===\"Any\") color = \"cyan\"\r\n                     if(tag===\"A4\") color = \"orange\"\r\n                     if(tag===\"A1\") color = \"red\"\r\n                     if(tag===\"A2\") color = \"magenta\"\r\n                    return (\r\n                      <Tag color={color} key={tag}>\r\n                        {tag.toUpperCase()}\r\n                      </Tag>\r\n                    );\r\n                  })}\r\n                </>\r\n            )\r\n        }\r\n        \r\n        ];\r\n\r\n    return (\r\n        <div>\r\n         <Modal title=\"Basic Modal\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n            {\r\n                <div>\r\n                    {modalContent.map(proj => {\r\n                        let projKeys = Object.keys(proj);\r\n                        return(\r\n                            <div style={{textAlign:\"left\"}}>\r\n                                {projKeys.map(ele => <div><b>{ele.toUpperCase()}</b> : {proj[ele]}</div>)}\r\n                                <br></br>\r\n                             </div>\r\n                        )\r\n                    }\r\n                    )}\r\n                </div>\r\n            }\r\n         </Modal>\r\n         <Table columns={columns} dataSource={rawData.data}/>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport {useState, useEffect} from 'react';\nimport { Input, Space, Layout } from 'antd';\nimport { Menu,Card, Tag, Button} from 'antd';\nimport { SearchOutlined, DownloadOutlined  } from '@ant-design/icons';\nimport axios from 'axios';\nimport Fuse from 'fuse.js';\nimport MyData from './MyData';\nimport { CSVLink, CSVDownload } from \"react-csv\";\n\n\nfunction App() {\n  const { Search } = Input;\n  const { Header, Footer, Sider, Content } = Layout;\n  const { SubMenu } = Menu;\n  const [data, setData] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [csv, setCsv] = useState([]);\n  //https://raw.githubusercontent.com/bitsacm/ps1data/master/src/data/ps1_data.json\n\n  useEffect(() => {\n    axios.get(\"https://raw.githubusercontent.com/bitsacm/ps1data/master/src/data/ps1_data.json\")\n    .then(res => setData(res.data));\n  }, [])\n  const fuse = new Fuse(data, {\n      keys: [\n        \"name\",\n        \"industry\",\n        \"location\",\n        \"branches\"\n      ]\n  })\n\n  const results = fuse.search(query);\n  const dataResults = query ? results.map(result => result.item): data;\n  const branch = [\"ANY\", \"B1\", \"B2\", \"B3\", \"B4\", \"B5\", \"AA\", \"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"A7\", \"A8\", \"C6\"];\n  const industry = [\"ELECTRONICS\", \"FINANCE AND MGMT\", \"MECHANICAL\", \"CHEMICAL\",\" CEMENT\", \"INFRASTRUCTURE\", \"IT\", \"COMPUTER SCIENCE\", \"HEALTH CARE\", \"GOVT RESEARCH LAB\", \"STEEL\", \"OTHERS\"];\n  const colors = [\"magenta\", \"red\", \"orange\", \"gold\", \"lime\", \"green\", \"cyan\", \"blue\", \"geekblue\", \"purple\"]\n\n  const queryHandler = ({currentTarget = {}}) => {\n    const {value} = currentTarget;\n    setQuery(value);\n  }\n  \n  const branchHandler = (branch) => {\n     console.log(\"HOW DO I DO THIS??\")\n  }\n  return (\n    <div>\n     <Layout>\n     <Header className=\"header\">  \n\n        <h1 style={{color:\"#fffbe6\"}}>PS1 HELPER</h1>\n\n       </Header>\n       <Layout>\n         <Sider width={300} style={{backgroundColor:\"#fff\"}}>\n          <Card title=\"FILTER BY BRANCH\" >    \n             { branch.map( (el, index) => \n                    <Tag key={index} onClick={(el) => branchHandler(el)} color={colors[index]} style={{marginBottom:\"10px\"}}>{el}</Tag>\n                 )}\n          </Card> \n\n          <Card title=\"FILTER BY INDUSTRY\">\n            { industry.map( (el, index) => \n                    <Tag key={index} color={colors[index] + \"-inverse\"} style={{marginBottom:\"10px\"}}>{el}</Tag>\n                 )}  \n          </Card> \n            <Button type=\"primary\" icon={<DownloadOutlined />} size=\"large\">\n              <CSVLink data={dataResults}><span style={{color:\"#fff\"}}>Download as CSV</span></CSVLink>\n            </Button>\n            \n\n\n\n         </Sider>\n         <Content>\n          <Search placeholder=\"Eg: Machine Learning\"  width = {300} size=\"large\" enterButton prefix={<SearchOutlined/>} onChange={queryHandler}/>\n           <MyData data={dataResults}/>\n         </Content>\n       </Layout>\n       <Footer></Footer>\n     </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n"],"sourceRoot":""}